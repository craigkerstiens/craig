<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Business | Craig Kerstiens]]></title>
  <link href="http://www.craigkerstiens.com/categories/business/atom.xml" rel="self"/>
  <link href="http://www.craigkerstiens.com/"/>
  <updated>2014-03-01T12:00:53-08:00</updated>
  <id>http://www.craigkerstiens.com/</id>
  <author>
    <name><![CDATA[Craig Kerstiens]]></name>
    <email><![CDATA[craig.kerstiens@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Securing your Internal Organization with OpenID]]></title>
    <link href="http://www.craigkerstiens.com/2012/01/23/securing-your-organization/"/>
    <updated>2012-01-23T00:00:00-08:00</updated>
    <id>http://www.craigkerstiens.com/2012/01/23/securing-your-organization</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently been amazed at the number of companies that are still using a VPN or other means to manage their apps/network. Not just large enterprisey companies, but small agile startups. I fully understand that it works, but 95% of these places are also using another key tool for access inside their company&hellip; <em>Google Apps</em>. I fully expect companies to use google apps, its more of the former that surprises me most. For a long time OpenID wasn&rsquo;t at a usable point, even today it still isn&rsquo;t without its faults. However, it does make for a much cleaner workflow once in place than having your users login to something with they&rsquo;re used to using elsewhere.</p>

<p>In our personal lives we use email as our keys to the kingdom. In fact I now almost refuse to sign up for any service that doesn&rsquo;t let me use oauth, so why should a work place be much different. So I inquired with a few companies to see if they were fine with securing things like documentation or wiki&rsquo;s being google auth, they indeed were. Yet they still seem to have users keep one more username and password for their VPN to be able to login to access internal docs/tools.</p>

<!-- more -->


<p>Most tech centric companies grow their own apps for many things they do within a company. Even the heavier adopters of SaaS still end up building a lot of internal systems. So why not secure them with your email domain just as you commonly would if it were a public service?</p>

<p>The problem comes in that OpenId with google has an initial setup overhead, but after that works unbelievably well.</p>

<h2>The catch</h2>

<p>In some cases you currently have to identify your domain as an OpenId provider. This means that @yourname.com is an OpenId provider. This simply means creating a url route for openid in your base site similar to the below:</p>

<p>``` xml <a href="http://heroku.com/openid">http://heroku.com/openid</a>
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;xrds:XRDS xmlns:xrds=&ldquo;xri://$xrds&rdquo; xmlns=&ldquo;xri://$xrd<em>($v</em>2.0)&rdquo;>
  <XRD></p>

<pre><code>&lt;Service priority="0"&gt;
  &lt;Type&gt;http://specs.openid.net/auth/2.0/signon&lt;/Type&gt;
  &lt;URI&gt;https://www.google.com/a/craigkerstiens.com/o8/ud?be=o8&lt;/URI&gt;
&lt;/Service&gt;
</code></pre>

<p>  </XRD>
&lt;/xrds:XRDS>
```</p>

<p><em>This is due to an issue of OpenID discovery which you can read more on at: <a href="https://groups.google.com/group/google-federated-login-api/browse_thread/thread/4a7dd2312a47a082/9285cec18a30b9d3?lnk=gst&amp;q=apps+discovery&amp;pli=1#9285cec18a30b9d3.">https://groups.google.com/group/google-federated-login-api/browse_thread/thread/4a7dd2312a47a082/9285cec18a30b9d3?lnk=gst&amp;q=apps+discovery&amp;pli=1#9285cec18a30b9d3.</a> In short, setting up the above can save you a lot of time</em></p>

<h2>Setting up in apps</h2>

<p>Most web frameworks have libraries that make it easy to secure your apps with openid/oauth. In particular Django and Rails both make this pretty easy. To make this even simpler for you below is code to actually secure an internal app for both Django and Rails. You can do similar with Flask or Sinatra as well.</p>

<h3>Rails</h3>

<p>In case your admin controller isn&rsquo;t already generated:</p>

<p><code>
rails g controller admin/users
</code></p>

<p>Then anything you want to secure:</p>

<p>```
module Admin
  class UsersController &lt; ApplicationController</p>

<pre><code>before_filter :admin_required

def index
  render :text =&gt; 'Hello from the admin panel!'
end
</code></pre>

<p>  end
end
```</p>

<h3>Django</h3>

<p>Finally sync your database:</p>

<p><code>
python yourapp/manage.py syncdb
</code></p>

<p>Secure any view with the <code>login_required</code> decorator as your typically would with Django.</p>

<h2>Summary</h2>

<p>In short with some very basic app setup you can have an internal workflow thats just as good as what you use in your day to day outside the office.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Heroku Works - Hiring]]></title>
    <link href="http://www.craigkerstiens.com/2011/12/02/how-heroku-works-hiring/"/>
    <updated>2011-12-02T00:00:00-08:00</updated>
    <id>http://www.craigkerstiens.com/2011/12/02/how-heroku-works-hiring</id>
    <content type="html"><![CDATA[<p>I alluded in earlier posts of <a href="http://www.craigkerstiens.com/2011/11/02/how-heroku-works-teams-tools/">How Heroku Works</a> that we have talented engineers. In fact I would venture to say that there is not a weak link when it comes to our engineers at Heroku. Ensuring we have talented engineers makes it easier for us to find other talented engineers and maintains a level of quality in our product. This means we must be very careful about not diluting our pool of engineering talent, which is where our hiring process becomes especially key. By the time we hire a new employee, we know without a doubt they&rsquo;re a fit within our organization.</p>

<p><em>Our goal in hiring is seldom to fill a role, but more commonly to find more talented people share our goal (changing the world for developers).</em></p>

<!--more-->


<p>So what&rsquo;s our hiring process look like&hellip;.</p>

<ol>
<li><del>Review Resume/Github Profile</del></li>
<li><del>Initial Screen</del></li>
<li><del>Second Screen</del></li>
<li><del>Starter Project</del></li>
</ol>


<p>While there&rsquo;s definitely a process that we follow that&rsquo;s not what&rsquo;s interesting. We way too often get worried about the steps 1, 2, 3&hellip; Instead you should focus on what&rsquo;s important: are they a fit? Can they get shit done? Who cares about how many phone screens someone goes through?! Five phone screens instead of two doesn&rsquo;t make them a better fit for your company. The short of it is they go through enough screens that you feel comfortable and you progress them through the process. For us at any point in the process if someone is determined to not be a fit the process ends there. If the process does end the hiring manager will relay this in the appropriate form, though always in writing via email as well.</p>

<p>The hiring manager could debatably be the biggest difference between our process and others. When a candidate applies to a position it goes to the hiring manager (<em>not an HR person</em>). The hiring manager will be your manager once at Heroku it&rsquo;s one in the same and this ensures from the start of the process the candidate and the manager mesh well. Yes, having the manager of a group review github profiles and resumes is extra effort, but who better to judge from a quick glance than engineers. In general as a manager you&rsquo;re evaluated on the success of those you manage, as such you should be invested heavily in those you hire. In addition to this we find a big difference in the on boarding process and how quickly someone can succeed. We have used many approaches, but the success of someone at Heroku based on having their hiring manager and manager be the same individual is best highlighted below:</p>

<p><img src="http://f.cl.ly/items/462y1J3G0L3q1f3v1o1U/hiring-1.png" alt="Hiring Manager = Manager" /></p>

<p>While every step in the hiring process is valuable starter projects may be the most valuable to ensuring quality. The final step with nearly everyone we hire is to invite them to come hack with us. Instead of parading someone around for a day long interview we get down to business and write some code. It could be something internal to Heroku, it could be an open source project we use, it could be something interesting that the candidate feels would add value to Heroku. Starter Projects vary slightly between each hiring manager.</p>

<p>Several of our managers prefer to lay out several potential interesting projects, talk through them with the candidate, and then let the candidate decide what they&rsquo;d like to work on. Sometimes there&rsquo;s a pressing need that the candidate can jump right in and add some value. It&rsquo;s <strong>always</strong> important that the starter project is achievable, if it&rsquo;s too broad of difficult for a 1-2 day period then the manager has failed in the hiring process. Regardless of the project it&rsquo;s far more than an exercise on a white board, it&rsquo;s actually what life is like at Heroku. We have lunch at the <a href="http://www.flickr.com/photos/teich/4928103311/">same table</a> that we eat at every other day, we interact just as we normally would, and after work there may or may not <a href="http://drunken-samurai-42.tumblr.com/">be drinks</a> just like any other day.</p>

<p><em>As a slight aside, we even conduct starter projects when current Herokai move from one team to another</em></p>

<p>Starter projects usually last anywhere from a day to several days. At the end of a starter project the candidate presents what they did, in a similar fashion to weekly demos that occur at workshop (more on that some other time). In earlier days it was nearly the entire company that would sit in, ask questions and give feedback. Now it&rsquo;s a bit harder for all us to fit into one conference room, though there&rsquo;s an open invite and anyone that wishes can sit in (often 10-20 Herokai). At the end of the starter project there&rsquo;s no question that the candidate fits or doesn&rsquo;t, often from both sides. Of course if it&rsquo;s a fit we make an offer and welcome them into the family.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Heroku Works - Maker's Day]]></title>
    <link href="http://www.craigkerstiens.com/2011/11/07/how-heroku-works-maker-day/"/>
    <updated>2011-11-07T00:00:00-08:00</updated>
    <id>http://www.craigkerstiens.com/2011/11/07/how-heroku-works-maker-day</id>
    <content type="html"><![CDATA[<p>In my earlier post on <a href="/2011/11/02/how-heroku-works-teams-tools/">Teams and Tools at Heroku</a>, I mentioned how we value engineers' time; their work has enabled us to build a great platform. As a result of what we&rsquo;ve built, we&rsquo;ve had great growth both of our platform and of our teams internally. With that growth inevitably comes different distractions on engineers' time. Despite how a manager may plan things, engineering work needs long periods of uninterrupted time. To ensure that no matter what, an engineer has plenty of opportunity to do the work he or she was hired to do, Heroku has Maker&rsquo;s Day.</p>

<!--more-->


<p><em>Maker&rsquo;s Day ensures that engineers get a full day of uninterrupted time to focus on making things.</em></p>

<p><img src="/images/makerday.png" alt="Maker's Day" /></p>

<p>The more consistent interruptions are throughout an engineer&rsquo;s day, the more time will be lost due to context switching in addition to the time spent on those other activities. These interruptions may include a quick question from a manager, a question on a code problem someone else is working through, or an email or IM from a coworker. Regardless of the type of interruption, it causes an engineer to lose focus. According to <a href="http://www.amazon.com/gp/product/0932633439/ref=as_li_tf_tl?ie=UTF8&amp;tag=mypred-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0932633439">Peopleware: Productive Projects and Teams</a>, in a study regarding productivity among engineers, the top performers when surveyed said they were interrupted regularly 38% of the time versus the bottom performers, who were interrupted 76%. Context switching should be counted as fully wasted time for an engineer, and all too often as the number of meetings increases, the time involved with context switching is increased similarly to the following:</p>

<p><img src="/images/contextswitch.png" alt="Cost of context switching" /></p>

<p>For more on how interruptions or context switching decreases productivity, Jeff Atwood has a great post about <a href="http://www.codinghorror.com/blog/2006/09/the-multi-tasking-myth.html">The Multi-Tasking Myth</a>, which demonstrates &hellip;</p>

<p>Most people understand that context switching is bad, but another team may still have valid demands on your time. Pushing back against another team or manager isn&rsquo;t always feasible; after all, we do work together, and each team at times may need something from another team. This is where Maker&rsquo;s Day starts to come in. Every Thursday at Heroku is Maker&rsquo;s Day.</p>

<p><strong>Maker&rsquo;s day is meant for making shit. Meetings don&rsquo;t happen on Maker&rsquo;s Day</strong>. If someone asks if that time on your calendar works for a meeting, the simple response is no&mdash;it&rsquo;s Maker&rsquo;s Day. Because Maker&rsquo;s Day has been ingrained into our culture, engineers have no problem giving that response when there&rsquo;s a request on their time on Maker&rsquo;s Day. If someone in marketing, sales, or another non-engineering role wants to book meetings, they’re welcome to do so, but they&rsquo;re going to be without engineers. However, even for non-engineers, Maker&rsquo;s Day is equally invaluable; uninterrupted hours of focus at a time are amazing for productivity in any role.</p>

<p>Maker&rsquo;s Day varies in how it is executed from person to person. Often the office is slightly less busy due to some engineers working from home or coffee shops to maximize their productivity. To an outsider, the office may appear business as usual: engineers sit at their desks, working. At lunch, everyone is sitting around the lunch table eating together. To the unobservant eye it may appear to be just any other day, but the engineers notice the difference. There will be significantly less interruptions by someone walking over to your desk, you won&rsquo;t be pulled into meetings that distract you from features, and you know it&rsquo;s an opportunity to accomplish a bulk of work laid out from your weekly planning meeting.</p>

<p>As Heroku has grown, meetings have increased, and the value of Maker Day&rsquo;s has increased exponentially.</p>

<p>Whether you&rsquo;re in the early stages of bootstrapping a company or at a large company of thousands of engineers, one of the best practices anyone can put into place is dedicated quality time for engineers to produce code. Maker&rsquo;s Day is a fantastic way to ensure this happens on a weekly basis.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Heroku Works - Dashboards]]></title>
    <link href="http://www.craigkerstiens.com/2011/11/06/how-heroku-works-dashboards/"/>
    <updated>2011-11-06T00:00:00-07:00</updated>
    <id>http://www.craigkerstiens.com/2011/11/06/how-heroku-works-dashboards</id>
    <content type="html"><![CDATA[<p>Commonly these broader metrics are constantly visible. Heroku takes an approach that if a dashboard is visible and something looks bad its likely to get asked about and fixed. These aren&rsquo;t executive level dashboards about user count and revenue, instead its engineering focused like so much else of Heroku.</p>

<p>Because we love building a product for engineers, displayed publicly are the metrics engineers care about. Near the lunch table you&rsquo;ll find a persistent TV with average response time per request, tests that are passing, and requests per second across the platform.</p>

<p>Additionally individual dashboards exist on a per team basis. For example in The Vault (Heroku&rsquo;s payments and billings team), you&rsquo;ll find a screen constantly displaying recent test results and a quick view of percentages in the top right that relate to success versus failures for certain metrics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Heroku Works - Maker Day]]></title>
    <link href="http://www.craigkerstiens.com/2011/11/05/oldmakersday/"/>
    <updated>2011-11-05T00:00:00-07:00</updated>
    <id>http://www.craigkerstiens.com/2011/11/05/oldmakersday</id>
    <content type="html"><![CDATA[<p>Heroku has been growing rapidly lately, both in terms of our user base as well as our teams that help make Heroku great. With this growth there&rsquo;s an increasing demand on individuals' time to interview candidates, ramp up new hires, collaborate cross organization&hellip; in short, individuals are putting in more time on procedural things. Many of those items, while very valuable, start to conflict with actually producing the code which at the end of the day is what we want engineers doing. As a result most teams at Heroku observe Maker Day.</p>

<!--more-->


<p>Maker day is, simply put, for making things. Engineers writing code, UX and designers designing, product managers engaging with customers or defining product needs&mdash;in general each person does their job to improve the platform. Our goal at Heroku is to never encumber employees with so many meetings their unable to be productive (though even short meetings and buckets of productive time are a partial step towards optimizing engineers productivity). Engineering is a task that requires truly focused time and effort. On a common day a schedule may look something like this:</p>

<ul>
<li>9:00 &ndash; arrive at the office</li>
<li>10:30 &ndash; team standup</li>
<li>11:00 &ndash; meeting cross team</li>
<li>12:30 &ndash; lunch</li>
<li>1:00 &ndash; all hands meeting</li>
<li>2:30 &ndash; meeting with another team</li>
<li>4:00 &ndash; interview candidate</li>
<li>5:00 &ndash; feedback on candidate</li>
<li>5:15 &ndash; meeting on product feature</li>
<li>6:30 &ndash; depart from office</li>
</ul>


<p>If you&rsquo;ll notice there are 4-5 one hour slots throughout the day for an engineer to be productive.</p>

<p><em>On maker day the common schedule looks a little more like this:</em></p>

<ul>
<li>9:00 &ndash; arrive at the office</li>
<li>10:30 &ndash; team standup</li>
<li><em>ENGINEERING</em></li>
<li>12:30 &ndash; lunch</li>
<li><em>ENGINEERING</em></li>
<li>6:30 &ndash; depart from office</li>
</ul>


<p>Outside of a short 15 minute stand up,</p>

<p>Maker day ensures that on an organization-wide level, engineers get to do what they came to Heroku to do, which is to write great code and build an awesome platform. Even product managers and marketing people have plenty of things on their to-do list that don&rsquo;t involve meetings. Perhaps there are interesting questions you&rsquo;ve been hoping to answer, or a customer survey you&rsquo;d like to get sent out.</p>
]]></content>
  </entry>
  
</feed>
